# Functions required by probe design script Sondovač

# Version of the script
SCRIPTVERSION=1.3
RELEASEDATE=2017-12-18
# Web page of the script
WEB="https://github.com/V-Z/sondovac/"

# Introductory message for users
echo
echo " ##############################################################################"
echo " #                                                                            #"
echo " #     Sondovač is a script to create orthologous low-copy nuclear probes     #"
echo " #        from transcriptome and genome skim data for target enrichment       #"
echo " #                                                                            #"
echo " #       Copyright (C) 2015 R. Schmickl, A. Liston, V. Zeisek and others      #"
echo " #                                                                            #"
echo " #          When using this script, please cite Schmickl et al. 2016          #"
echo " #                                                                            #"
echo " ##############################################################################"
echo
echo -e "\tThis is version $SCRIPTVERSION released $RELEASEDATE."
echo -e "\tFor newest version check $WEB or \"$0 -u\""
echo -e "\tIn case of problems not covered in README for user support see $WEB"
echo -e "\tFor basic usage see \"$0 -h\""
echo -e "\tFor detailed usage instructions see README or \"$0 -r\""
echo
echo "This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. For more information see LICENSE, https://gnu.org/licenses/gpl.html or '$0 -l'."
echo
echo "This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details."
echo
echo "################################################################################"
echo

# Help for command line options shared by both parts of the script
function generaloptions {
	echo
	echo "Usage options:"
	echo -e "\t-h, -v\tPrint this help message and exit."
	echo -e "\t-u\tCheck for updates of Sondovač at $WEB and download of newer version will be offered to the user."
	echo -e "\t-l\tDisplay LICENSE for license information (this script is licensed under GNU GPL v.3, other software under variable licenses). Exit viewing by pressing the \"Q\" key."
	echo -e "\t-r\tDisplay README for detailed usage instructions. Exit viewing by pressing the \"Q\" key. More information is available in the PDF manual."
	echo -e "\t-p\tDisplay INSTALL for detailed installation instructions. Exit viewing by pressing the \"Q\" key. More information is available in the PDF manual."
	echo -e "\t-e\tDisplay detailed citation information and exit."
	echo -e "\t-o\tSet name of output files. Output files will start with that name. Do not use spaces or special characters, only letters, numbers, dots, underscores or minuses. See README or PDF manual for details."
	echo -e "\t-i\tRunning in interactive mode. Script will on-demand ask for required input files, installation of missing software etc. This is the recommended default value (the script runs interactively without explicitly using option -n)."
	echo -e "\t-n\tRunning in non-interactive mode. The user must provide at least the required input files below. You can use only one of the parameters -i or -n (not both of them). If script fails to find some of the required software packages, it will exit."
	}

# Check if user didn't use together -n and -i
function checkmodef {
	if [ "$CHECKMODE" == 2 ]; then
		echo
		echo "Error! You provided both parameters -i (interactive mode) and -n (non-interactive mode). You must use only one of them (either -i or -n)!"
		echo
		exit 1
		fi
	}

# Sometimes user must read something and confirm continuing...
function confirmgo {
	if [ "$STARTINI" == "I" ]; then
		echo
		echo "Press any key to continue... (or press Ctrl+C to exit the script)."
		read -n 1
		echo
		echo "Continuing..."
		echo
		else
			echo
			fi
	}

# Select tool for downloading - wget or curl
function downloaderselector {
	echo
	if command -v wget >/dev/null 2>&1; then
		DOWNLOADER='wget -q -O'
		echo "The script will use \"wget\" to download from the internet."
		elif command -v curl >/dev/null 2>&1; then
			DOWNLOADER='curl -s -L -o'
			echo "The script will use \"curl\" to download from the internet."
			else
				echo
				echo "Error! Command \"wget\" as well as \"curl\" are missing. The script can need one of them to download some of the required software packages and other things from the internet. Please, install one of them manually and restart previous task."
				echo
				exit 1
				fi
	echo
	}

# Check availability of basic UNIX binaries
function checktools {
	{ command -v $1 >/dev/null 2>&1 && echo "Command \"$1\" is available. OK."; } || {
		echo "Error! Command\"$1\" is required but not installed! Aborting. Please, install \"$1\" and ensure it is in PATH. It should be readily available for any UNIX-based system (Linux, Mac OS X, BSD, ...). See PDF manual for more information."
		echo
		exit 1
		}
	}

# Function to update whole script
function scriptupdater {
	downloaderselector
	checktools grep
	checktools cut
	checktools mv
	echo
	echo "Checking for updates..."
	{ $DOWNLOADER .info https://raw.githubusercontent.com/V-Z/sondovac/master/.info &&
		ONLINEVERSION=`grep 'CURRENTVERSION' .info | cut -f 2 -d "="` &&
		mv .info .info~
		} || {
			echo
			echo "Error! Downloading of version information available on-line failed. Please, go to $WEB and check for available version manually. Your current version is $SCRIPTVERSION."
			echo
			exit 1
			}
	echo
	if [[ (( "$SCRIPTVERSION" < "$ONLINEVERSION" )) ]]; then
		echo "Your version is $SCRIPTVERSION. On-line available version $ONLINEVERSION is newer. Would you like to install newer version now? (Yes/No)"
		read UPDATER
		while :
			do
				case "$UPDATER" in
					Y|y|YES|Yes|yes)
						checktools unzip
						echo
						echo "Downloading newer version of the script..."
						NEWVERSION=`curl -s -L https://raw.githubusercontent.com/V-Z/sondovac/master/.info | grep NEWVERSION | cut -f 2 -d "="`
						$DOWNLOADER sondovac.$ONLINEVERSION.zip $NEWVERSION || {
							echo
							echo "Error! Downloading of newer version available on-line failed. Please, go to $WEB and download and unpack newer version manually."
							echo
							exit 1
							}
						echo
						unzip sondovac.$ONLINEVERSION.zip
						echo
						echo "Newer version $ONLINEVERSION is available in directory \"$WORKDIR/sondovac\". Please, replace current files by content of this directory and launch newer version."
						echo
						break
						;;
					N|n|NO|No|no)
						echo
						echo "Please, go to $WEB and download and unpack newer script version manually."
						echo
						break
						;;
					*) echo "Wrong option. Use Y or N." && read UPDATER;;
					esac
				done
		else
			echo
			echo "Your version of the script is the newest one (version $SCRIPTVERSION.). See also README, and in case of questions visit $WEB."
			echo
			fi
	exit
	}

# Display license information
function licenser {
	checktools less
	less $SCRIPTDIR/LICENSE || {
		echo
		echo "Error! Can not display file $SCRIPTDIR/LICENSE! Is your installation correct? See https://gnu.org/licenses/gpl.html for GNU GPL v.3 and $WEB to ensure you have all needed files."
		echo
		exit 1
		}
	echo
	exit
	}

# Display README
function readmeview {
	checktools less
	less $SCRIPTDIR/README || {
		echo
		echo "Error! Can not display file $SCRIPTDIR/README! Is your installation correct? See $WEB to ensure you have all needed files."
		echo
		exit 1
		}
	echo
	exit
	}

# Display INSTALL
function installview {
	checktools less
	less $SCRIPTDIR/INSTALL || {
		echo
		echo "Error! Can not display file $SCRIPTDIR/INSTALL! Is your installation correct? See $WEB to ensure you have all needed files."
		echo
		exit 1
		}
	echo
	exit
	}

# Display detailed citation information
function citationreference {
	echo
	echo "################################################################################"
	echo
	echo "When using Sondovač, please cite:"
	echo "Roswitha Schmickl, Aaron Liston, Vojtěch Zeisek, Kenneth Oberlander, Kevin Weitemier, Shannon C.K. Straub, Richard C. Cronn, Léanne L. Dreyer and Jan Suda"
	echo "Phylogenetic marker development for target enrichment from transcriptome and genome skim data: the pipeline and its application in southern African Oxalis (Oxalidaceae)"
	echo "Molecular Ecology Resources (2016)"
	echo "http://onlinelibrary.wiley.com/doi/10.1111/1755-0998.12487/abstract"
	echo
	echo "Citations of scientific software used by Sondovač:"
	echo "BLAT:"
	echo "* W. James Kent"
	echo "  BLAT – the BLAST-like alignment tool"
	echo "  Genome Research (2002) 12:656-664"
	echo "  http://genome.cshlp.org/content/12/4/656.short"
	echo "Bowtie2:"
	echo "* Ben Langmead and Steven L. Salzberg"
	echo "  Fast gapped-read alignment with Bowtie 2"
	echo "  Nature Methods (2012) 9:357-359"
	echo "  http://www.nature.com/nmeth/journal/v9/n4/full/nmeth.1923.html"
	echo "CD-HIT:"
	echo "* Weizhong Li, Lukasz Jaroszewski and Adam Godzik"
	echo "  Clustering of highly homologous sequences to reduce the size of large protein databases"
	echo "  Bioinformatics (2001) 17:282-283."
	echo "  http://bioinformatics.oxfordjournals.org/content/17/3/282.short"
	echo "* Weizhong Li, Lukasz Jaroszewski and Adam Godzik"
	echo "  Tolerating some redundancy significantly speeds up clustering of large protein databases"
	echo "  Bioinformatics (2002) 18:77-82"
	echo "  http://bioinformatics.oxfordjournals.org/content/18/1/77.short"
	echo "* Weizhong Li and Adam Godzik"
	echo "  Cd-hit: a fast program for clustering and comparing large sets of protein or nucleotide sequences"
	echo "  Bioinformatics (2006) 22:1658-1659"
	echo "  http://bioinformatics.oxfordjournals.org/content/22/13/1658.short"
	echo "* Limin Fu, Beifang Niu, Zhengwei Zhu, Sitao Wu and Weizhong Li"
	echo "  CD-HIT: accelerated for clustering the next generation sequencing data"
	echo "  Bioinformatics (2012) 28:3150-3152"
	echo "  http://bioinformatics.oxfordjournals.org/content/28/23/3150.short"
	echo "* Ying Huang, Beifang Niu, Ying Gao, Limin Fu and Weizhong Li"
	echo "  CD-HIT Suite: a web server for clustering and comparing biological sequences"
	echo "  Bioinformatics (2010) 26:680"
	echo "  http://bioinformatics.oxfordjournals.org/content/26/5/680.short"
	echo "* Beifang Niu, Limin Fu, Shulei Sun and Weizhong Li"
	echo "  Artificial and natural duplicates in pyrosequencing reads of metagenomic data"
	echo "  BMC Bioinformatics (2010) 11:187"
	echo "  http://www.biomedcentral.com/1471-2105/11/187"
	echo "* Weizhong Li, Limin Fu, Beifang Niu, Sitao Wu and John Wooley"
	echo "  Ultrafast clustering algorithms for metagenomic sequence analysis"
	echo "  Briefings in Bioinformatics (2012) 13(6):656-668"
	echo "  http://bib.oxfordjournals.org/content/13/6/656.abstract"
	echo "FLASH:"
	echo "* Tanja Magoč and Steven L. Salzberg"
	echo "  FLASH: fast length adjustment of short reads to improve genome assemblies"
	echo "  Bioinformatics (2011) 27(21):2957-2963"
	echo "  http://bioinformatics.oxfordjournals.org/content/27/21/2957.abstract"
	echo "Geneious:"
	echo "* Matthew Kearse, Richard Moir, Amy Wilson, Steven Stones-Havas, Matthew Cheung, Shane Sturrock, Simon Buxton, Alex Cooper, Sidney Markowitz, Chris Duran, Tobias Thierer, Bruce Ashton, Peter Meintjes1, and Alexei Drummond"
	echo "  Geneious Basic: An integrated and extendable desktop software platform for the organization and analysis of sequence data"
	echo "  Bioinformatics (2012) 28(12):1647-1649"
	echo "  http://bioinformatics.oxfordjournals.org/content/28/12/1647"
	echo "SAMtools:"
	echo "* Heng Li, Bob Handsaker, Alec Wysoker, Tim Fennell, Jue Ruan, Nils Homer, Gabor Marth, Goncalo Abecasis, Richard Durbin and 1000 Genome Project Data Processing Subgroup"
	echo "  The Sequence Alignment/Map format and SAMtools"
	echo "  Bioinformatics (2009) 25(16): 2078-2079"
	echo "  http://bioinformatics.oxfordjournals.org/content/25/16/2078.abstract"
	echo "* Heng Li"
	echo "  A statistical framework for SNP calling, mutation discovery, association mapping and population genetical parameter estimation from sequencing data"
	echo "  Bioinformatics (2011) 27(21): 2987-2993"
	echo "  http://bioinformatics.oxfordjournals.org/content/27/21/2987.abstract"
	echo "* Heng Li"
	echo "  Improving SNP discovery by base alignment quality"
	echo "  Bioinformatics (2011) 27(8): 1157-1158."
	echo "  http://bioinformatics.oxfordjournals.org/content/27/8/1157.short"
	echo
	echo "For more information see README, you can do so by \"$0 -r\" and/or PDF manual and/or visit $WEB"
	echo
	exit
	}

# Install needed packages for DEB distributions - Debian, Ubuntu, Linux Mint and direct derivatives
function debinstall {
	echo
	PACKAGES=''
	# Check if all required packages are installed
	while read PACKAGENAME; do
		if dpkg -l $PACKAGENAME | grep -q 'ii  '; then
			echo "Package \"$PACKAGENAME\" is available. OK."
			else
				echo "Package \"$PACKAGENAME\" is missing. It will be installed."
				PACKAGES="$PACKAGES"$(echo " $PACKAGENAME")
				fi
		done < $SCRIPTDIR/pkgs/packages-deb || {
			echo
			echo "Error! Can not check installed packages. Ensure following packages are installed:"
			cat $SCRIPTDIR/pkgs/packages-deb || {
				echo "Error! Can not find file $SCRIPTDIR/pkgs/packages-deb Go to $WEB and verify if your installation is correct."
				echo
				exit 1
				}
			confirmgo
			}
	# If some packages are missing, install them
	if [ -n "$PACKAGES" ]; then
		# Install missing packages
		echo
		echo "Packages \"$PACKAGES\" are missing."
		echo
		echo "Compilation may require to install them.Would you like to install them now? It requires administrative privileges. (Yes/No)"
		read DEBIANI
		while :
			do
				case "$DEBIANI" in
					Y|y|YES|Yes|yes)
						echo "Installing required packages..."
						{ { sudo apt-get update && sudo apt-get install $PACKAGES; } || { su -c 'apt-get update' && su -c "apt-get install $PACKAGES"; }; } || {
							echo
							echo "Installation of packages \"$PACKAGES\" failed. Those packages may be required to install software used by Sondovač. If so, install those packages manually. See INSTALL or PDF manual for details."
							confirmgo
							}
						break
						;;
					N|n|NO|No|no)
						echo
						echo "You may need packages \"$PACKAGES\" If compilation of some software required for the pipeline fails, install them manually. See INSTALL or PDF manual for details. See also https://help.ubuntu.com/community/CompilingEasyHowTo"
						confirmgo
						break
						;;
					*) echo "Wrong option. Use Y or N." && read DEBIANI;;
					esac
				done
		else
			echo "Packages required for compilation are installed. OK."
			fi
	}

# Install needed packages for RPM based distributions derived from RedHat - Fedora, Centos and Scientific Linux
function rpminstall {
	echo
	PACKAGES=''
	# Check if all required packages are installed
	while read PACKAGENAME; do
		if rpm -q --quiet $PACKAGENAME; then
			echo "Package \"$PACKAGENAME\" is available. OK."
			else
				echo "Package \"$PACKAGENAME\" is missing. It will be installed."
				PACKAGES="$PACKAGES"$(echo " $PACKAGENAME")
				fi
		done < $SCRIPTDIR/pkgs/packages-rh || {
			echo
			echo "Error! Can not check installed packages. Ensure following packages are installed:"
			cat $SCRIPTDIR/pkgs/packages-rh || {
				echo "Error! Can not find file $SCRIPTDIR/pkgs/packages-rh Go to $WEB and verify if your installation is correct."
				echo
				exit 1
				}
			confirmgo
			}
	if [ -n "$PACKAGES" ]; then
		# Install missing packages
		echo
		echo "Packages \"$PACKAGES\" are missing."
		echo
		echo "Compilation may require to install them. Would you like to install them now? It requires administrative privileges. (Yes/No)"
		read RPMI
		while :
			do
				case "$RPMI" in
					Y|y|YES|Yes|yes)
						echo "Installing required packages..."
						{ sudo yum install $PACKAGES || su -c "yum install $PACKAGES"; } || {
							echo
							echo "Installation of packages \"$PACKAGES\" failed. Those packages may be required to install software used by Sondovač. If so, install those packages manually. See INSTALL for details."
							confirmgo
							}
						break
						;;
					N|n|NO|No|no)
						echo
						echo "You may need packages \"$PACKAGES\" If compilation of some software required for the pipeline fails, install them manually. See INSTALL for details."
						confirmgo
						break
						;;
					*) echo "Wrong option. Use Y or N." && read RPMI;;
					esac
				done
		else
			echo "Packages required for compilation are installed. OK."
			fi
	}

# Check operating system
function oscheck {

	OSCHECKS=`uname -s` || {
		echo
		echo "Command \"uname\" is not available on the system, is not in the PATH or the user does not have permission to use it, so that operating system is not detectable. Assuming Linux. If this is not correct, you may experience problems during installation of required software. If so, please install required dependencies manually. See INSTALL for more details."
		OS="Linux"
		confirmgo
		}

	# Operating system
	if [ -n "$OSCHECKS" ]; then
		case "$OSCHECKS" in
			Darwin|darwin) OS="Mac";;
			Linux|linux) OS="Linux";;
			CYGWIN*|MINGW32*|MSYS*|WIN32|cygwin*|msys*|mingw32*|win32) OS="Windows";;
			*BSD*|*bsd*) OS="BSD";;
			SOLARIS|Solaris|solaris|SUN*|Sun|sun*) OS="Solaris";;
			*) echo
				echo "OS other than Linux, Mac OS X, BSD, Solaris or Windows or undetectable OS. Assuming Linux. If this is not correct, you may experience problems during installation of needed software. If so, please install required dependencies manually. See INSTALL or PDF manual for more details."
				OS="Linux"
				confirmgo
				;;
			esac
		fi

	# Warning for Windows users
	if [ "$OS" == "Windows" ]; then
		echo
		echo "Warning! Running this pipeline on Windows (native or any emulation) is not supported, although it may be possible. We are not able to guarantee the pipeline to work. See INSTALL or PDF manual for more details. We wish you good luck. :-)"
		confirmgo
		fi

	# Warning for BSD and Solaris users
	if [ "$OS" == "BSD" -o "$OS" == "Solaris" ]; then
		echo
		echo "Warning! Running this pipeline on any version of $OS was not tested, although it is supposed to work. We are not able to guarantee the pipeline to work. See INSTALL or PDF manual for more details. We wish you good luck. :-)"
		confirmgo
		fi

	OSCHECKB=`uname -m` || {
		echo
		echo "Command \"uname\" is not available on the system, is not in the PATH or the user does not have permission to use it, so that type of the CPU is not detectable. Assuming 64 bit CPU. If this is not correct, you may experience problems during installation of needed software. If so, please install required dependencies manually. See INSTALL or PDF manual for more details."
		OSB="64b"
		confirmgo; }

	# 64 or 32 bit
	if [ -n "$OSCHECKB" ]; then
		case "$OSCHECKB" in
			*x86_64*|*ia64*) OSB="64b";;
			*i386*|*i486*|*i586*|*i686*) OSB="32b";;
			*) echo
				echo "OS other than 64 or 32 bit or undetectable OS details. Assuming 64 bit. If this is not correct, you may experience problems during installation of needed software. If so, please install required dependencies manually. See INSTALL or PDF manual for more details."
				OSB="64b"
				confirmgo
				;;
			esac
		fi

  # Warning for 32 bit systems
	if [ "$OSB" == "32b" ]; then
		echo
		echo "Warning! Some packages are not available for $OSB bit system, it will probably be impossible to run the pipeline on this system. We recommend to upgrade CPU and/or reinstall operating system for 64 bit system. See INSTALL or PDF manual for more details. We wish you good luck. :-)"
		confirmgo
		fi

	echo "Current OS is $OS $OSB."
	echo

	# If on Linux, check distribution and notify user about possible need of compilation tools
	if [ "$OS" == "Linux" ]; then
		{ DISTRIBUTION=`lsb_release -is` || DISTRIBUTION=`python -c 'import platform ; print (platform.dist()[0])'` || DISTRIBUTION=`python -c 'import platform ; print platform.dist()[0]'`; } || {
			echo
			echo "Unable to detect Linux version! Probably because command \"lsb_release\" is missing, not in PATH or not available for current user. For some steps you may need compilation tools (see INSTALL for details). Ensure you have those tools available."
			confirmgo
			}
		if [ "$STARTINI" == "I" ]; then
			if [ -n "$OSCHECKS" ]; then
			echo
			echo "If you prefer to compile some of the software required by Sondovač, although we recommend to use binaries provided by the script, you will need compilation tools. The following section will check for presence of compilation tools for your Linux distribution. If you prefer usage of provided binaries, you can skip it."
			confirmgo
			case "$DISTRIBUTION" in
				*[Ss][Uu][Ss][Ee]*)
					LINUX="SUSE"
					echo "Linux distribution is SUSE, openSUSE or derivative."
					echo
					PACKAGES=''
					# Check if all required packages are installed
					while read PACKAGENAME; do
						if rpm -q --quiet $PACKAGENAME; then
							echo "Package \"$PACKAGENAME\" is available. OK."
							else
								echo "Package \"$PACKAGENAME\" is missing. It will be installed."
								PACKAGES="$PACKAGES"$(echo " $PACKAGENAME")
								fi
						done < $SCRIPTDIR/pkgs/packages-suse || {
							echo
							echo "Error! Can not check installed packages. Ensure following packages are installed:"
							cat $SCRIPTDIR/pkgs/packages-suse || {
								echo "Error! Can not find file $SCRIPTDIR/pkgs/packages-suse Go to $WEB and verify if your installation is correct."
								echo
								exit 1
								}
							confirmgo
							}
					if [ -n "$PACKAGES" ]; then
						# Install missing packages
						echo
						echo "Packages \"$PACKAGES\" are missing."
						echo
						echo "Compilation may require to install them. Would you like to install them now? It requires administrative privileges. (Yes/No)"
						read SUSEI
						while :
							do
								case "$SUSEI" in
									Y|y|YES|Yes|yes)
										echo "Installing required packages..."
										{ sudo zypper in $PACKAGES || su -c "zypper in $PACKAGES"; } || {
											echo
											echo "Installation of packages \"$PACKAGES\" failed. Those packages may be required to install software used by Sondovač. If so, install those packages manually. See INSTALL for details."
											confirmgo
											}
										break
										;;
									N|n|NO|No|no)
										echo
										echo "You may need packages \"$PACKAGES\" If compilation of some software required for the pipeline fails, install them manually. See INSTALL for details."
										confirmgo
										break
										;;
									*) echo "Wrong option. Use Y or N." && read SUSEI;;
									esac
								done
						else
							echo "Packages required for compilation are installed. OK."
							fi
					;;
				*[Uu]buntu*)
					LINUX=Ubuntu
					echo "Linux distribution is Ubuntu or derivative."
					debinstall
					;;
				*[Dd]ebian*)
					LINUX=Debian
					echo "Linux distribution is Debian or derivative."
					debinstall
					;;
				*[Mm]int*)
					LINUX=Debian
					echo "Linux distribution is Linux Mint or derivative."
					debinstall
					;;
				*[Ff]edora*)
					LINUX="Fedora"
					echo "Linux distribution is Fedora or derivative."
					rpminstall
					;;
				*[Cc]entos*)
					LINUX="Centos"
					echo "Linux distribution is Centos or derivative."
					rpminstall
					;;
				*[Rr]ed[Hh]at*|*[Ss]cientific*)
					LINUX="RedHat"
					echo "Linux distribution is RedHat, Scientific Linux or derivative."
					rpminstall
					;;
				# Another distros...
				*) echo
					echo "Unknown Linux distribution, probably not openSUSE, SUSE, RedHat, Fedora, Centos, Scientific, Debian, Ubuntu, Linux Mint or derivatives. For some steps you may need compilation tools (see INSTALL or PDF manual for details). Ensure you have those tools available."
					confirmgo
					break
					;;
				esac
				fi
			fi
		fi

	# If on Mac, notify user about need of compilation tools
	if [ "$OS" == "Mac" ]; then
		if [ "$STARTINI" == "I" ]; then
			echo
			# Check for Xcode
			echo "Xcode is required to install Homebrew, which is required to upgrade and install software used by Sondovač. See INSTALL or PDF manual for details."
			echo
			echo "Unfortunately, it is not easily possible to universally check for presence of Xcode. If you have never used command \"make\" or not installed Xcode manually, you probably do not have it. If you have ever compiled any software, you probably have Xcode installed. After installation of Xcode you will probably have to restart Sondovač. Would you like to install Xcode now? (Yes/No)"
			read XCODEI
			while :
				do
					case "$XCODEI" in
						Y|y|YES|Yes|yes)
							echo "Installing Xcode..."
							xcode-select --install || {
								echo
								echo "Installation of Xcode failed. This is commonly because it has been already installed. If you see in output below Xcode path and version, you can safely continue. Otherwise see, please, command \"xcode-select --help\" and https://developer.apple.com/xcode/ and install Xcode manually."
								xcode-select --print-path
								xcode-select --version
								confirmgo
								}
							break
							;;
						N|n|NO|No|no)
							echo
							echo "Xcode is required for installation of software needed by Sondovač. If you do not have Xcode installed, install it manually. See INSTALL or PDF manual for details. IIf you see in output below Xcode path and version, you can safely continue."
							xcode-select --print-path
							xcode-select --version
							confirmgo
							break
							;;
						*) echo "Wrong option. Use Y or N." && read XCODEI;;
						esac
					done
			echo
			# Check for Homebrew, install if not available
			echo "Homebrew is a service allowing to install and manage various applications. See http://brew.sh/ and/or manual for more information. Testing if Homebrew is available..."
			{ command -v brew >/dev/null 2>&1 &&
				echo "Homebrew is available. OK. Checking for Homebrew updates..." &&
				echo &&
				brew update
				} || {
					echo "Homebrew is not available. Homebrew is required to install software required by Sondovač. Would you like to install it now? (Yes/No)"
					read BREWI
					while :
						do
							case "$BREWI" in
								Y|y|YES|Yes|yes)
									echo "Installing Homebrew..."
									ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" || {
										echo
										echo "Error! Installation of Homebrew failed. Please, go to http://brew.sh/ and install it manually."
										echo
										exit 1
										}
									break
									;;
								N|n|NO|No|no)
									echo
									echo "Homebrew is required to install software required by Sondovač. Please, go to http://brew.sh/ install it manually. See INSTALL or PDF manual for details."
									echo
									exit
									;;
								*) echo "Wrong option. Use Y or N." && read BREWI;;
									esac
							done
					}
			echo
			echo "Script will now check for presence of required Homebrew formulae. Formulae will be installed when needed."
			confirmgo
			echo "Checking for installed packages (brew formulae)..."
			while read BREWFORMULA; do
				if [[ ! $(brew ls --versions $BREWFORMULA) ]]; then
					echo
					echo "Formula \"$BREWFORMULA\" is missing. Going to install it..."
					brew install $BREWFORMULA || {
						echo "Installation of formula \"$BREWFORMULA\" failed. Please, install Homebrew formula \"$BREWFORMULA\" and ensure it is available. See PDF manual for details."
						confirmgo
						}
					else
						echo
						echo "Formula \"$BREWFORMULA\" is present. OK. Going to reinstall it to ensure it is up-to-date and installed in correct place."
						brew reinstall $BREWFORMULA || {
							echo "Installation of formula \"$BREWFORMULA\" failed. Please, check Homebrew formula \"$BREWFORMULA\" and ensure it is available. See PDF manual for details."
							confirmgo
							}
						fi
				echo
				echo "Information about formula \"$BREWFORMULA\":"
				brew info $BREWFORMULA
				echo
				done < $SCRIPTDIR/pkgs/packages-brew
			echo
			echo "List of currently installed Homebrew formulae:"
			brew list
			echo
			echo "See \"brew help\" or PDF manual for information about management of Homebrew formulae."
			confirmgo
			# Modify PATH to contain newly installed software
			echo "Modifying PATH to contain binaries installed by Homebrew in correct place."
			export PATH="/usr/local/opt/coreutils/libexec/gnubin:/usr/local/bin:$PATH"
			# Remove duplicities from PATH
			export PATH="$(echo "$PATH" | awk 'BEGIN{RS=":";}{sub(sprintf("%c$",10),"");if(A[$0]){}else{A[$0]=1;printf(((NR==1)?"":":")$0)}}')"
			echo "Current PATH is: $PATH"
			echo "Consider to make this PATH permanent, as it contains more utilities and newer versions than in original installation of Mac OS X."
			confirmgo
			else
				echo
				echo "Checking if Homebrew and required formulae are installed."
				{ command -v brew >/dev/null 2>&1 && echo "Homebrew is available. OK."; } || {
					echo
					echo "Error! Homebrew is missing! Check INSTALL and PDF manual for details or run Sondovač interactively to install it automatically: \"$0 -i\""
					echo
					exit 1
					}
				while read BREWFORMULA; do
					if [[ $(brew ls --versions $BREWFORMULA) ]]; then
						echo "Formula \"$BREWFORMULA\" is installed. OK."
						else
							echo
							echo "Error! Formula \"$BREWFORMULA\" is missing. Check INSTALL and PDF manual for details or run Sondovač interactively to install it automatically: \"$0 -i\""
							echo
							exit 1
							fi
					echo
					done < $SCRIPTDIR/pkgs/packages-brew
			echo
			# Modify PATH to contain newly installed software
			echo "Modifying PATH to contain binaries installed by Homebrew in correct place."
			export PATH="/usr/local/opt/coreutils/libexec/gnubin:/usr/local/bin:$PATH"
			# Remove duplicities from PATH
			export PATH="$(echo "$PATH" | awk 'BEGIN{RS=":";}{sub(sprintf("%c$",10),"");if(A[$0]){}else{A[$0]=1;printf(((NR==1)?"":":")$0)}}')"
			echo "Current PATH is: $PATH"
			echo "Consider to make this PATH permanent, as it contains more utilities and newer versions than in original installation of Mac OS X."
			echo
			fi
		fi
	} # End of OS checking

# Set variables for working directory and PATH
function workdirpath {
	# Check if there is bin directory, if not, create it
	checktools pwd
	checktools mkdir
	WORKDIR=`pwd`
	mkdir -p $WORKDIR/bin/bin || {
		echo
		echo "Error! Can not create directory \"bin\" in directory \"$WORKDIR\"! Do you have write permission for directory \"$WORKDIR\"?"
		echo
		exit 1
		}
	BIN=$WORKDIR/bin/bin
	echo
	echo "For future work consider adding \"$BIN\" to PATH, as it will contain binaries of tools used in this pipeline. Alternatively, you can move whole \"$WORKDIR/bin\" to your preferred location, but ensure to move all files and keep relative paths."
	confirmgo
	cd $WORKDIR
	# Add bin directory in current directory into PATH
	export PATH=$BIN:$PATH
	}

# Check if input files have DOS or UNIX encoding
function eolcheck {
	if awk '/\r$/{exit 0;} 1{exit 1;}' $1; then
		echo "Input file $1 has DOS end of lines. It will be converted into UNIX end of lines"
		dos2unix $1 || {
			echo "Error! Conversion to UNIX EOL failed. Aborting. Check if $1 is valid file."
			echo
			exit 1
			}
		echo
		else
			echo "Input file $1 has UNIX end of lines. OK."
			echo
		fi
	}

# Function to convert interleaved FASTA into non-interleaved (if necessary)
# $1 is input FASTA file provided by the user, $2 is output non-interleaved FASTA file
function noninterleavedfasta {
	echo "Converting possibly interleaved FASTA file $1 into non-interleaved FASTA file $2"
	{ awk 'BEGIN{RS=">"}NR>1{sub("\n","\t");gsub("\n",""); print RS$0}' $1 | sed 's/\t/\n/g' > $2; } || {
		echo "Error! Conversion of FASTA failed. Aborting. Check if $1 is correct FASTA file."
		echo
		exit 1
		}
	echo
	}

# Function to compile BLAT
function compileblat {
	{
	echo
	downloaderselector &&
	checktools unzip &&
	checktools make &&
	checktools gcc &&
	checktools cp &&
	echo "Downloading \"BLAT\" source code" &&
	if [ -z $MACHTYPE ]; then
		echo
		echo "Error! Variable \$MACHTYPE required by BLAT is missing. Trying to create it. If it fails, create global variable \$MACHTYPE manually, download binary or compile it on another comparable machine."
		MACHTYPE=$HOME/bin/$OSB
		else
			echo
			echo "BLAT binaries will be available in $HOME/bin/$MACHTYPE and $BIN (consider adding them into the PATH)."
			confirmgo
		fi &&
	echo &&
	$DOWNLOADER blatSrc.zip https://users.soe.ucsc.edu/~kent/src/blatSrc.zip &&
	unzip -nq blatSrc.zip &&
	cd blatSrc &&
	{ mkdir -p $HOME/bin/$MACHTYPE || {
		echo
		echo "Error! Can not create directory \"$HOME/bin/$MACHTYPE\" required by BLAT. Aborting."
		echo
		exit 1
		}; } &&
	export PATH=$PATH:$HOME/bin/$MACHTYPE &&
	{ mkdir -p lib/$MACHTYPE || {
		echo
		echo "Error! Can not create directory \"$(pwd)/lib/$MACHTYPE\" required by BLAT. Aborting."
		echo
		exit 1
		}; } &&
	echo "Compiling \"BLAT\" from source code" &&
	make -s &&
	cd $WORKDIR &&
	cp -p $HOME/bin/$MACHTYPE/* $BIN/ &&
	echo "\"BLAT\" is available. OK."
	} || {
		echo
		echo "Error! Compilation failed. Please, go to https://users.soe.ucsc.edu/~kent/src/, download latest blatSrc*.zip, compile it and ensure it is in PATH"
		exit 1
		}
	}

# Check if BLAT is available
function checkblat {
	{ command -v blat >/dev/null 2>&1 && echo "\"BLAT\" is available. OK."; } || {
		echo
		echo "BLAT is required but not installed or available in PATH."
		echo
		if [ "$STARTINI" == "I" ]; then
			echo "Type \"S\" to compile \"BLAT\" from source available on https://users.soe.ucsc.edu/~kent/src/ (BLAT license does not allow redistributions; required if \"BLAT\" is not available for your system). Together with standard compilation tools \"BLAT\" requires libpng developmental files."
			echo "Type \"D\" to download \"BLAT\" from http://hgdownload.cse.ucsc.edu/admin/exe/ automatically for your OS (BLAT license does not allow redistributions; available for 64 bit Linux and Mac OS X, recommended)."
			echo "Type \"H\" for installation using Homebrew (only for Mac OS X, recommended). See \"brew info homebrew/science/blat\" for more details."
			echo "Type \"M\" for manual installation - script will exit, and you will have to install \"BLAT\" yourself. Check http://genome.ucsc.edu/FAQ/FAQblat.html for more information."
			read BLAT
			while :
				do
					case "$BLAT" in
						S|s)
							compileblat
							break
							;;
						D|d)
							downloaderselector
							if [ "$OS" == "Mac" ]; then
								{
								echo "Downloading blat binary for $OS" &&
								$DOWNLOADER blat http://hgdownload.cse.ucsc.edu/admin/exe/macOSX.x86_64/blat/blat &&
								chmod +x blat &&
								mv blat $BIN/ &&
								echo "\"BLAT\" is available. OK."
								} || {
									echo
									echo "Error! Download of \"BLAT\" failed. Please, go to http://hgdownload.cse.ucsc.edu/admin/exe/macOSX.x86_64/blat/ and download blat binary yourself."
									echo
									exit 1
									}
								elif [[ "$OS" == "Linux" && "$OSB" == "64b" ]]; then
									{
									echo "Downloading blat binary for $OS" &&
									$DOWNLOADER blat http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/blat/blat &&
									chmod +x blat &&
									mv blat $BIN/ &&
									echo "\"BLAT\" is available. OK."
									} || {
										echo
										echo "Error! Download of \"BLAT\" failed. Please, go to http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/blat/ and download blat binary yourself."
										echo
										exit 1
										}
									else
										echo "Unknown OS or OS without \"BLAT\" binary available."
										compileblat
										fi
							break
							;;
						H|h)
							if [ "$OS" == "Mac" ]; then			
								{ echo "Installing \"BLAT\" using Homebrew" &&
								brew install homebrew/science/blat &&
								echo "\"BLAT\" is available. OK."
								} || {
									echo
									echo "Error! Installation of \"BLAT\" failed. Please, do it manually. For details see \"brew info homebrew/science/blat\" and \"brew help\"."
									echo
									exit 1
									}
								else
									echo "This is not Mac OS X. Going to compile..."
									compileblat
									fi
							break
							;;
						M|m) echo "Please, go to http://genome.ucsc.edu/FAQ/FAQblat.html and download and install \"BLAT\" and ensure it is in PATH."
							echo
							exit 2
							;;
						*) echo "Wrong option. Use S, D, H or M." && read BLAT;;
					esac
				done
			else
				exit 1
				fi
		}
	}

# Function to check and read input files
# Parameters: 1) parameter for particular file; 2) name (description) of input file; 3) variable for particular file (written into $CHECKFILEREADOUT)
function readinputfile {
	checktools realpath
	CHECKFILEREAD=$3
	if [ "$STARTINI" == "I" ]; then
		if [ -z "$CHECKFILEREAD" ]; then
			echo "Provide file name for $2:"
			while :
				do
					read CHECKFILEREAD
					# Test if input file is readable
					if [[ -f $CHECKFILEREAD && -r $CHECKFILEREAD && -s $CHECKFILEREAD ]]; then
						echo
						echo "Input file \"$CHECKFILEREAD\" exists and is readable. Proceeding..."
						break
						else
							echo "Error! File \"$CHECKFILEREAD\" does not exist, is empty or is not readable!"
							echo "Provide new one:"
							fi
					done
			else
				echo "As input $2 file you provided via parameter $1 file \"$CHECKFILEREAD\". Would you like to use it (Yes) or to provide new file (New)?"
				read CHECKFILE
				while :
					do
						case "$CHECKFILE" in
							Y|y|YES|Yes|yes)
								echo "Keeping \"$CHECKFILEREAD\"..."
								echo
								if [[ -f $CHECKFILEREAD && -r $CHECKFILEREAD && -s $CHECKFILEREAD ]]; then
									echo "Input file \"$CHECKFILEREAD\" exists and is readable. Proceeding..."
									else
										echo "Error! File \"$CHECKFILEREAD\" does not exist, is empty or is not readable!"
										echo "Provide new one:"
										while :
											do
												read CHECKFILEREAD
												# Test if input file is readable
												if [[ -f $CHECKFILEREAD && -r $CHECKFILEREAD && -s $CHECKFILEREAD ]]; then
													echo
													echo "Input file \"$CHECKFILEREAD\" exists and is readable. Proceeding..."
													break
													else
														echo "Error! File \"$CHECKFILEREAD\" does not exist, is empty or is not readable!"
															echo "Provide new one:"
														fi
												done
										fi
								break
								;;
							N|n|NO|No|no|NEW|New|new)
								echo "Provide file name for new $2:"
								while :
									do
										read CHECKFILEREAD
										# Test if input file is readable
										if [[ -f $CHECKFILEREAD && -r $CHECKFILEREAD && -s $CHECKFILEREAD ]]; then
											echo
											echo "Input file \"$CHECKFILEREAD\" exists and is readable. Proceeding..."
											break
											else
												echo "Error! File \"$CHECKFILEREAD\" does not exist, is empty or is not readable!"
												echo "Provide new one:"
												fi
										done
								break
								;;
							*)
								echo "Wrong option. Use Y or N."
								read CHECKFILE
								;;
							esac
						done
				fi
			else
				if [[ -f $CHECKFILEREAD && -r $CHECKFILEREAD && -s $CHECKFILEREAD ]]; then
					echo
					echo "Input file \"$CHECKFILEREAD\" exists and is readable. Proceeding..."
					else
						echo "Error! File \"$CHECKFILEREAD\" does not exist, is empty or is not readable!"
						exit 1
						fi
		fi
	# Recorded file name
	CHECKFILEREADOUT=`realpath $CHECKFILEREAD`
	}

# Function to convert FASTA to TAB
# $1 is input file in FASTA, $2 output file in TAB
function fasta2tab {
	#awk '/>/{if (x)print x;x="";}{x=(!x)?$0:x"\t"$0;}END{print x;}' $1 | sed 's/>[[:blank:]]*/>/g' | sed 's/[[:blank:]]+/ /g' | tr "\n" "\t" | sed 's/\t>/\n>/g' | sed 's/^>//g' | sed 's/[[:blank:]]*$//g' > $2
	sed 's/[[:blank:]]\{1,\}/_/g' $1 | awk '/>/{if (x)print x;x="";}{x=(!x)?$0:x"\t"$0;}END{print x;}' | sed 's/^>//g' > $2 || {
		echo "Error! Conversion of FASTA to TAB (TSV) failed. Aborting. Check if $1 is correct FASTA file."
		echo
		exit 1
		}
	echo
	}

